#!/usr/bin/env python3

import subprocess, re, numpy as np, sys, argparse
import matplotlib.pyplot as plt; plt.rcdefaults()
from time import sleep,time
from tkinter import *
from tkinter import ttk
from threading import Thread
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
_OS = sys.platform
if _OS != 'linux' and _OS != 'win32':
    exit('> OS not recognized or not supported.\n')

'''
TODO:
    - add progress bar to GUI version :)
    - fix GUI on Windows (getting ping errors)
    - add tick box to toggle threading in GUI
'''

def invalid_input():
    print('ERROR: one or more parameters are invalid. Use -h to display valid input range.\n')
    exit()

########## BEGIN handling command line arguments ##########
parser = argparse.ArgumentParser(description='''
 ____ ____  ____    ____  ______    ___  _____ ______ 
|    \    ||    \  /    ||      |  /  _]/ ___/|      |
|  o  )  | |  _  ||   __||      | /  [_(   \_ |      |
|   _/|  | |  |  ||  |  ||_|  |_||    _]\__  ||_|  |_|
|  |  |  | |  |  ||  |_ |  |  |  |   [_ /  \ |  |  |  
|  |  |  | |  |  ||     |  |  |  |     |\    |  |  |  
|__| |____||__|__||___,_|  |__|  |_____| \___|  |__|  
                                                      
Pingtest program by mire\nhttps://github.com/itsonlyMiRE/pingtest\n''', prog='pingtest', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-G', help='use GUI (all other flags are ignored if this is used)', action='store_true')
parser.add_argument('-a', help='address to ping (or use \'-a F\' to use first hop router)', metavar='<address>')
parser.add_argument('-d', help='duration of test (DEFAULT: 10)', metavar='<seconds>', type=int)
parser.add_argument('-f', help='frequency in pings per second (DEFAULT: 50, but 1 on Windows unless using threading)', metavar='<pings/second>', type=int)
parser.add_argument('-t', help='threshold of acceptable ping time (DEFAULT: 60)', metavar='<milliseconds>', type=int)
parser.add_argument('-T', help='enable threading approach (highly recommended for Windows users)', action='store_true')
args = parser.parse_args()
# target address
if args.a == 'F':
    try:
        # find first hop, handle OS properly
        if _OS == 'linux':
            tmp = str(subprocess.check_output('traceroute google.com -m 2', stderr=subprocess.STDOUT, shell=True))
            first_hop = re.findall('\s+2\s+\d+.\d+.\d+.\d+', str(tmp))
        elif _OS == 'win32':
            tmp = str(subprocess.check_output('tracert -4 -h 2 google.com', stderr=subprocess.STDOUT, shell=True))
            first_hop_line = re.findall('2\s+\d+\sms\s+\d+\sms\s+\d+\sms\s+\d+.\d+.\d+.\d+', str(tmp))[0]
            first_hop = re.findall('s\s+\d+.\d+.\d+.\d+', first_hop_line)
        
        if len(first_hop) != 0:
            _addr = ''.join(first_hop[0].split())[1:]
        else:
            exit('> error retrieving first hop router. try again\n')
    except subprocess.CalledProcessError as e:
        first_hop = re.findall('\s+2\s+\d+.\d+.\d+.\d+', str(e.output))
        if len(first_hop) != 0:
            _addr = ''.join(first_hop[0].split())[1:]
        else:
            exit('> error retrieving first hop router. try again')
else:
    _addr = args.a
# frequency
if args.f == None:
    if _OS == 'linux':
        _freq = round(1 / 50, 2)
    elif _OS == 'win32':
        _freq = 1
elif args.f and _OS == 'win32' and not args.T:
    print('> frequency is not supported on Windows without threading enabled (-T)\n')
    exit()
else:    
    if _OS == 'linux':
        if (int(args.f) < 1) or (int(args.f) > 50):
            invalid_input()
        _freq = round(1 / args.f, 2)
    elif _OS == 'win32':
        _freq = 1
# duration
if args.d == None:
    _duration = 10
else:
    if (args.d < 1) or (args.d > 120):
        invalid_input()
    _duration = args.d
# threshold
if args.t == None:
    _threshold = 60
else:
    if (args.t < 1) or (args.t > 1000):
        invalid_input()
    _threshold = args.t
_num_pings = round(_duration / _freq)
########## END handling command line arguments ##########


''' def progress(duration):
    while prog_bar['value'] < 100:
        prog_bar['value'] += 1
        value_label['text'] = update_progress_label()
        root.update_idletasks()
        sleep(duration/100)

def update_progress_label():
    return f'Progress: {round(prog_bar['value'])}%' '''

def progress(duration):
    value = 1
    print()
    timestamp = time()
    while value <= 100:
        print('|' + '*'*value + ' '*(100-value) + '|  ' + str(value) + '%\ttime left: ' + str(int(duration)-(round(time() - timestamp))) + 's', end='   \r')
        sleep(duration/100)
        value+=1
    print('\n')

def generate_graph(threshold, times):
    # set x and y values
    x=[]
    for i in range(1,len(times)+1):
        x.append(i)
    y = np.array(times)

    # define thresholds
    above_threshold = np.maximum(y - int(threshold), 0)
    below_threshold = np.minimum(y, int(threshold))

    # create bar graph using data
    plt.style.use('dark_background')

    try:
        fig, ax = plt.subplots(1,1,figsize=(11,6))
        ax.bar(x, below_threshold, 0.35, color='g')
        ax.bar(x, above_threshold, 0.35, color='r',
                bottom=below_threshold)
        ax.axhline(int(threshold), color='gray')
        ax.set_ylabel('Ping times (ms)')
        ax.set_xlabel('Pings')
    except ValueError:
        print('> OOPS! ValueError, something went wrong. Try again.\n')
        exit()

    if args.G == True:
        # draw plot
        canvas = FigureCanvasTkAgg(fig, master = root)  
        canvas.draw()
        # placing the canvas on the Tkinter window
        canvas.get_tk_widget().grid(row=1,column=3,rowspan=10,padx=30,pady=15)
    else:
        plt.show()

late_count = []
_times = []

def send_ping(addr):
    try:
        if _OS == 'linux':
            _times.append(round(float(re.findall('time=\d+\.*\d* ms', (str(subprocess.check_output(f'ping {addr} -c 1', stderr=subprocess.STDOUT, shell=True))))[0].replace('time=', '').replace(' ms', ''))))
        elif _OS == 'win32':
            _times.append(round(float(re.findall('time=\d+\.*\d*ms', (str(subprocess.check_output(f'ping -n 1 {addr}', stderr=subprocess.STDOUT, shell=True))))[0].replace('time=', '').replace('ms', ''))))
    except subprocess.CalledProcessError as e:
        print('> Error running ping test (possibly due to invalid address)\n')
        return 0
    
    if _times[-1] > int(_threshold):
        late_count.append(None)

def perform_pingtest(addr, freq, num_pings, threshold):
    # threading approach
    if not args.G:
        prog = Thread(target=progress, args=(_duration,))
        prog.start()
    if args.T:
        ping_threads = [None]*num_pings
        for i in range(int(num_pings)):
            ping_threads[i] = Thread(target=send_ping, args=(addr,))
            ping_threads[i].start()
            sleep(float(_freq))
        for i in range(int(num_pings)):
            ping_threads[i].join()
        sleep(.5)
    # non-threading approach
    else:
        try:
            if _OS == 'linux':
                output = re.findall('time=\d+\.*\d* ms', str(subprocess.check_output(f'sudo ping {addr} -i {freq} -c {num_pings}', stderr=subprocess.STDOUT, shell=True)))
                for i in range(len(output)):
                    _times.append(round(float(output[i].replace('time=', '').replace(' ms', ''))))
                    if _times[-1] > int(_threshold):
                        late_count.append(None)
            elif _OS == 'win32':
                output = re.findall('time=\d+\.*\d*ms', str(subprocess.check_output(f'ping -n {num_pings} {addr}', stderr=subprocess.STDOUT, shell=True)))
                for i in range(len(output)):
                    _times.append(round(float(output[i].replace('time=', '').replace('ms', ''))))
                    if _times[-1] > int(_threshold):
                        late_count.append(None)
        except subprocess.CalledProcessError as e:
            print('> Error running ping test (possibly due to invalid address)\n')
            return 0
    if not args.G:
        prog.join()
    if len(_times) != '0':
        late_pct = len(late_count) / int(num_pings)
        if args.G == False:
            print('> late packets: ' + str(len(late_count)) + ' (' + str(round((late_pct*100), 2)) + '%)')
            print('> showing charted results...\n')
        else:
            info_box.config(state='normal')
            info_box.insert(END, '\n> late packets: ' + str(len(late_count)) + ' (' + str(round((late_pct*100), 2)) + '%)\n')
            info_box.insert(END, '> showing charted results...\n')
            info_box.config(state='disabled')
        return _times
    else:
        return 0
    
def _run():
    # assign parameters of test
    addr = text_box.get()
    if addr == '':
        # find first hop, handle OS properly
        if _OS == 'linux':
            tmp = str(subprocess.check_output('traceroute google.com -m 2', stderr=subprocess.STDOUT, shell=True))
            first_hop = re.findall('\s+2\s+\d+.\d+.\d+.\d+', str(tmp))
        elif _OS == 'win32':
            tmp = str(subprocess.check_output('tracert -4 -h 2 google.com', stderr=subprocess.STDOUT, shell=True))
            #tmp = '2\t313 ms\t\t25 ms\t\t 275 ms\t\t 10.134.0.1'
            first_hop_line = re.findall('2\s+\d+\sms\s+\d+\sms\s+\d+\sms\s+\d+.\d+.\d+.\d+', str(tmp))[0]
            first_hop = re.findall('s\s+\d+.\d+.\d+.\d+', first_hop_line)
    freq = round(1 / freq_slider.get(), 2)
    duration = duration_slider.get()
    threshold = threshold_slider.get()
    num_pings = round(duration / freq)
    
    # begin pinging using chosen arguments
    info_box.config(state='normal')
    info_box.delete('1.0', END)
    info_box.insert(END, f'> starting {num_pings} pings on {addr}...\n')
    info_box.config(state='disabled')
    root.update_idletasks()
    data = perform_pingtest(addr, freq, num_pings, threshold)
    
    # generate and show graph
    if data != 0:
        generate_graph(threshold, data)
    else:
        info_box.config(state='normal')
        info_box.insert(END, '\n> error occurred in ping test\n')
        info_box.config(state='disabled')

if __name__ == '__main__':
    # if GUI is used, begin making Tkinter stuff
    if args.G == True:
        root = Tk()
        root.title('Pingtest GUI')
        root.geometry('1600x920')
        root.configure(bg='#292929')

        # blank row separator
        blank1 = Label(root, text='', bg='#292929')
        blank1.grid(padx=20, pady=20, row=1, column=1)

        # text boss for address input
        box_label = Label(root, text='Address to Ping (leave blank for first hop router)', bg='#292929', fg='#FFFFFF')
        box_label.grid(row=2, column=1)
        text_box = Entry(root)
        text_box.grid(padx=20, row=3, column=1)

        # blank row separator
        blank2 = Label(root, text='', bg='#292929')
        blank2.grid(padx=20, pady=5, row=4, column=1)

        # blank row separator
        blank3 = Label(root, text='', bg='#292929')
        blank3.grid(padx=20, row=0, column=3)

        # ping frequency slider
        freq_slider = Scale(root, from_=1, to=50, length=400, resolution=1, orient=HORIZONTAL, label='Frequency (pings/second)', bg='#292929', fg='#FFFFFF')
        freq_slider.set(50)
        freq_slider.grid(padx=20, pady=20, row=5, column=1)

        # test duration slider
        duration_slider = Scale(root, from_=1, to=120, length=400, resolution=1, orient=HORIZONTAL, label='Duration (seconds)', bg='#292929', fg='#FFFFFF')
        duration_slider.set(10)
        duration_slider.grid(padx=20, pady=20, row=6, column=1)

        # acceptable ping slider
        threshold_slider = Scale(root, from_=5, to=150, length=400, resolution=1, orient=HORIZONTAL, label='Acceptable Delay (ms)', bg='#292929', fg='#FFFFFF')
        threshold_slider.set(60)
        threshold_slider.grid(padx=20, pady=20, row=7, column=1)

        # start button
        start_button = Button(root, text='Start Test', command=_run)
        start_button.grid(padx=20, pady=40, row=8, column=1)

        # progress bar
        ''' prog_bar = ttk.Progressbar(
            root,
            orient='horizontal',
            mode='determinate',
            length=280
        )
        prog_bar.grid(column=1, row=9, padx=10, pady=10)

        # progress bar label
        value_label = ttk.Label(root, text=update_progress_label(),  background='#292929', foreground='#FFFFFF')
        value_label.grid(padx=20, column=1, row=10) '''

        # info printout box
        info_box = Text(
            root,
            height=12,
            width=100,
            background='#d6d6d6',
            foreground='#000000'
        )
        info_box.grid(row=11, column=1, padx=20, pady=20, columnspan=5)
        info_box.insert('end', '> program started')
        info_box.config(state='disabled')
        # initialize blank graph
        generate_graph(1,[0]*100)

        print('> Launching GUI...\n')
        root.mainloop()
    
    # if GUI is not used, perform in CLI
    else:
        if args.a == None:
            print('\nERROR: one of the two flags -a or -G must be used. Use -h flag for help.\n')
        else:
            print(f'\n> starting {_num_pings} pings on {_addr}...')
            try:
                if _OS == 'linux':
                    test_ping = str(subprocess.check_output(f'ping {_addr} -c 1', stderr=subprocess.STDOUT, shell=True))
                elif _OS == 'win32':
                    test_ping = str(subprocess.check_output(f'ping -n 1 {_addr}', stderr=subprocess.STDOUT, shell=True))
                data = perform_pingtest(_addr, _freq, _num_pings, _threshold)
                if data != 0:
                    generate_graph(_threshold, data)
                else:
                    print("> error occurred in ping test\n")
            except subprocess.CalledProcessError as e:
                print('> Error running ping test (possibly due to invalid address)\n')

# EOF